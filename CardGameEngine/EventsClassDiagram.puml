@startuml

class IDisposable
package EventSystem{

class EventManager{
'objet intermediaire qui cast pour appeler l'évenement
 + {field} <<delegate>> OnEvent<T extends Event>(in evt: T)
 - _eventHandlersDict: Dictionary<Type,List<OnEvent<Event>>>
 
 + SubscribeToEvent<T extends Event> (in deleg : OnEvent<T>, in evenCancelled : bool = false, postEvent: bool = false)
 + UnsubscribeFromEvent<T extends Event> (in deleg : OnEvent<T>, in postEvent: bool = false)
 + SendEvent<T extends Event> (in evt : T, in postEvent : bool = false) : PostEventSender
 'faut pas oublier d'envoyer les Post
 ' utilisation d'un bloc using
}

interface EventManager::IPostEventSender implements IDisposable{
 + <<property>> Event: Event {readOnly}
 + Dispose()
 'méthode qui s'occupe d'appeler EventManager.SendEvent avec le meme event en post
}

class EventManager::PostEventSenderImpl implements EventManager::IPostEventSender

class EventProperty<S,T,ET implements IPropertyChangeEvent<S, T>>{
 - _sender : S
 + <<property>> Value : T {readOnly}
 
 + EventProperty(in sender: S)
 + TryChangeValue(in newVal: T)
}

interface EventManager::IEventHandler<T extends Event>{
    + <<property>> ReceiveCancelled: bool {readOnly}
    + <<property>> IsPost: bool {readOnly}
    + HandleEvent(Event evt)
} 

class EventManager::IEventHandlerImpl<T extends Event> implements EventManager::IEventHandler{
    - _event : OnEvent<T> {readOnly}
    + <<property>> ReceiveCancelled : bool {readOnly}
    + <<property>> IsPost : bool {readOnly}
    + HandleEvent(Event evt)
}

package Events{
abstract class Event
abstract class CancellableEvent extends Event{ 
 + <<property>> Cancelled: bool = false
}

class EffectActivateEvent extends CancellableEvent{
    + <<property>> Effect: Effect
}

interface IPropertyChangeEvent<S,T>{
    + <<property>> Sender : S
    + <<property>> Value : T
}

class ActionPointEditEvent extends CancellableEvent{
    + <<property>> Player: Player
    + <<property>> OldPointCount: int {readOnly}
    + <<property>> NewPointCount: int
    
}

'implementation explicite seulement accessible via l'interface
ActionPointEditEvent ..|> IPropertyChangeEvent : <<bind>>\nT=int\nS=Player


package GameStateEvents{

class StartTurnEvent extends Event{
+ <<property>> Player: Player
}

class EndTurnEvent extends Event{
+ <<property>> Player: Player
}
class DeckLoopEvent extends Event{
+ <<property>> Player: Player
}
}

package CardEvents{

abstract class CardEvent extends CancellableEvent{
 + <<property>> Card : Card
}

class TargetingEvent extends Event{
 + <<property>> TargetData: Target
}


class CardUpgradeEvent extends CardEvent
class CardMovePileEvent extends CardEvent{
 + <<property>> SourcePile: CardPile
 + <<property>> SourceIndex: int
 + <<property>> DestPile: CardPile
 + <<property>> DestIndex: int
}

class CardPlayEvent extends CardEvent
class CardMarkUpgradeEvent extends CardEvent
class CardDeleteEvent extends CardEvent



package PropertyChange{
abstract class CardPropertyChangeEvent<T> extends CardEvent{
 + <<property>> OldValue : T {readOnly}
 + <<property>> NewValue : T
}
'implementation explicite seulement accesible via l'interface
CardPropertyChangeEvent ..|> IPropertyChangeEvent : <<bind>>\nT=T\nS=Card

CardNameChangeEvent --u|> CardPropertyChangeEvent : <<bind>>\nT=string
CardLevelChangeEvent --u|> CardPropertyChangeEvent : <<bind>>\nT=int
CardCostChangeEvent --u|> CardPropertyChangeEvent : <<bind>>\nT=int
CardEffectIdChangeEvent --u|> CardPropertyChangeEvent : <<bind>>\nT=int

}

package KeywordEvents{
abstract class CardKeywordEvent extends CardEvent{
    + <<property>> Keyword: Keyword
}


class CardKeywordAddEvent extends CardKeywordEvent{
}
class CardKeywordRemoveEvent extends CardKeywordEvent{
}

class CardKeywordTriggerEvent extends CardKeywordEvent{
}

'keywordevents
} 
'CardEvents
}

package ArtefactEvents{

abstract class ArtefactEvent extends CancellableEvent{
    + <<property>> Artefact: Artefact
}

class ArtefactChargeEditEvent extends ArtefactEvent{
    + <<property>> RelativeChargeChange: int
}


class ArtefactActivateEvent extends ArtefactEvent

ArtefactChargeEditEvent ..u|> IPropertyChangeEvent : <<bind>>\nT=Artefact\nS=int

'ArtefactEvents
}

'Events
}

'EventSystem
}

EventManager -[hidden]d-> Events


CardPropertyChangeEvent -[hidden]d-> KeywordEvents

@enduml