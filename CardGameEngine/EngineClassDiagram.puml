@startuml
'Les champs ayant le stéréotype <<property>> sont des propriétés C#

'potentiellement inclure les deux
!include CardsClassDiagram.puml

class Exception

package GameSystems{

package Effects{
class Effect{
+ <<property>> EffectType: EffectType {readOnly}
+ <<property>> EffectId : int {readOnly}
+ DoEffect(in theGame: Game): bool
+ Effect(in effectType: EffectType, in effectId: int, in targets: Target[0..*])
}

class EffectsDatabase{
- _effectDictionary : Dictionary<int,Effect>
- LoadEffect(in type: EffectType, in effectId: int) : Effect
+ LoadAllEffects(in path: string)
}

enum EffectType{
    Artefact
    Keyword
    Card
}

class InvalidEffectException extends Exception {
- _effectId : int {readOnly}
- _effectType : EffectType {readOnly}
+ InvalidEffectException(in effectId: int, in effectType: EffectType)
}
Effect .l. EffectType
}


class Player{
+ <<property>> Deck: CardPile
'+ <<property>> Artefacts: Artefact[2] {readOnly}
+ <<property>> Name: string {readOnly}
+ <<property>> Hand : CardPile
+ <<property>> ActionPoints : EventProperty<Player,int,ActionPointEditEvent> {readOnly}
+ <<property>> Discard : DiscardPile

+ DrawCard(in theCard?: Card = null)
+ PrepareCardUpgrade(in theCard: Card)
+ LoopDeck()
+ DiscardCard(in theCard: Card)

}

Player "2" *-- "1" Artefact : <<property>> Artefacts {readOnly}

package Targeting{

class Target{
+ <<property>> TargetType : TargetTypes {readOnly}
+ <<property>> IsAutomatic : bool
+ <<property>> Name: string

}
Effect "1" *--  "0..*" Target : <<property>> AllTargets {readOnly}


enum TargetTypes{
    Player
    Card
}
Target .r. TargetTypes
}
}

class Game{

+ <<property>> CurrentPlayerTurn: Player {readOnly}
+ <<property>> EventManager: EventManager {readOnly}
+ <<property>> EffectsDatabase: EffectsDatabase {readOnly}

+ CheckHasWon(in playerToCheck: Player) : bool
+ StartPlayerTurn(in player: Player)
+ FinishTurn(in player: Player)
+ CanBePlayed(in by: Player, in theCard: Card) : bool
+ PlayCard(in thePlayer: Player, in theCard: Card)
+ ActivateArtifact(in thePlayer: Player, in theArtefact: Artefact)
}



Player "1" --d-* "1" Game: <<property>> Player1 {readOnly}
Player "1" --d-* "1" Game: <<property>> Player2 {readOnly}


'pour palacer GameSystems en haut
GameSystems -[hidden]d--> Cards


@enduml