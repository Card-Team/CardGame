<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-run id="0" runstate="Runnable" testcasecount="13" result="Passed" total="13" passed="13" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="19" engine-version="3.13.0.0" clr-version="4.0.30319.42000" start-time="2021-12-09 16:27:11Z" end-time="2021-12-09 16:27:13Z" duration="1.660232">
  <command-line><![CDATA[D:\Lelou\Programming\RiderProjects\CardGame\packages\NUnit.ConsoleRunner.3.13.0\tools\nunit3-console.exe --result D:\Lelou\Programming\RiderProjects\CardGame\NUnitTestResults.xml CardGameEngine.Tests.dll]]></command-line>
  <test-suite type="Assembly" id="1-1017" name="CardGameEngine.Tests.dll" fullname="D:\Lelou\Programming\RiderProjects\CardGame\CardGameEngine.Tests\bin\Release\CardGameEngine.Tests.dll" runstate="Runnable" testcasecount="13" result="Passed" start-time="2021-12-09T16:27:12.6542366Z" end-time="2021-12-09T16:27:13.3749108Z" duration="0.719602" total="13" passed="13" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="19">
    <environment framework-version="3.13.2.0" clr-version="4.0.30319.42000" os-version="Microsoft Windows NT 10.0.18363.0" platform="Win32NT" cwd="D:\Lelou\Programming\RiderProjects\CardGame\CardGameEngine.Tests\bin\Release" machine-name="LELOU-DESKTOP" user="Lelou" user-domain="LELOU-DESKTOP" culture="fr-FR" uiculture="fr-FR" os-architecture="x64" />
    <settings>
      <setting name="DisposeRunners" value="True" />
      <setting name="WorkDirectory" value="D:\Lelou\Programming\RiderProjects\CardGame\CardGameEngine.Tests\bin\Release" />
      <setting name="ImageRuntimeVersion" value="4.0.30319" />
      <setting name="ImageTargetFrameworkName" value=".NETFramework,Version=v4.8" />
      <setting name="ImageRequiresX86" value="False" />
      <setting name="ImageRequiresDefaultAppDomainAssemblyResolver" value="False" />
      <setting name="TargetRuntimeFramework" value="net-4.8" />
      <setting name="NumberOfTestWorkers" value="12" />
    </settings>
    <properties>
      <property name="_PID" value="27056" />
      <property name="_APPDOMAIN" value="domain-" />
    </properties>
    <test-suite type="TestSuite" id="1-1018" name="CardGameTests" fullname="CardGameTests" runstate="Runnable" testcasecount="13" result="Passed" start-time="2021-12-09T16:27:12.6684852Z" end-time="2021-12-09T16:27:13.3749108Z" duration="0.706193" total="13" passed="13" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="19">
      <test-suite type="TestFixture" id="1-1000" name="Tests du chargement des effets" fullname="CardGameTests.Tests du chargement des effets" classname="CardGameTests.Tests" runstate="Runnable" testcasecount="13" result="Passed" start-time="2021-12-09T16:27:12.6699854Z" end-time="2021-12-09T16:27:13.3749108Z" duration="0.704302" total="13" passed="13" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="19">
        <properties>
          <property name="Author" value="Bilel" />
          <property name="Category" value="Effets" />
          <property name="TestOf" value="CardGameEngine.GameSystems.Effects.EffectsDatabase" />
        </properties>
        <test-suite type="ParameterizedMethod" id="1-1016" name="Test_Effect_Card_Data" fullname="CardGameTests.Tests.Test_Effect_Card_Data" classname="CardGameTests.Tests" runstate="Runnable" testcasecount="1" result="Passed" start-time="2021-12-09T16:27:12.6729859Z" end-time="2021-12-09T16:27:13.2974892Z" duration="0.624303" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="7">
          <properties>
            <property name="Description" value="Verifier que le chargement d'une carte contient bien les données attendues" />
          </properties>
          <test-case id="1-1015" name="Example" fullname="CardGameTests.Tests du chargement des effets.Example" methodname="Test_Effect_Card_Data" classname="CardGameTests.Tests" runstate="Runnable" seed="1345167410" result="Passed" start-time="2021-12-09T16:27:12.6737346Z" end-time="2021-12-09T16:27:13.2944882Z" duration="0.620918" asserts="7">
            <properties>
              <property name="Category" value="Card" />
            </properties>
          </test-case>
        </test-suite>
        <test-suite type="ParameterizedMethod" id="1-1014" name="Test_Load_Effect_Bad" fullname="CardGameTests.Tests.Test_Load_Effect_Bad" classname="CardGameTests.Tests" runstate="Runnable" testcasecount="9" result="Passed" start-time="2021-12-09T16:27:13.2982397Z" end-time="2021-12-09T16:27:13.3481456Z" duration="0.050057" total="9" passed="9" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="9">
          <properties>
            <property name="Description" value="Verifier que les effets mal formés sont rejetés" />
          </properties>
          <test-case id="1-1005" name="Blank Script" fullname="CardGameTests.Tests du chargement des effets.Blank Script" methodname="Test_Load_Effect_Bad" classname="CardGameTests.Tests" runstate="Runnable" seed="1767185069" result="Passed" start-time="2021-12-09T16:27:13.2982397Z" end-time="2021-12-09T16:27:13.3072381Z" duration="0.008946" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[
]]></output>
          </test-case>
          <test-case id="1-1006" name="Calling Unknown Function" fullname="CardGameTests.Tests du chargement des effets.Calling Unknown Function" methodname="Test_Load_Effect_Bad" classname="CardGameTests.Tests" runstate="Runnable" seed="343357301" result="Passed" start-time="2021-12-09T16:27:13.3072381Z" end-time="2021-12-09T16:27:13.3154879Z" duration="0.008316" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[max_level = 2
image_id = 500


name = "Nom"
pa_cost = 2

targets = {
    -- Nom, Type, Automatique ou non,Fonction de filtre des cibles potentielles
    MeilleureFonctionQuiExistePas("Une cible carte", TargetTypes.Card, false, card_filter),
    CreateTarget("Un joueur", TargetTypes.Player, true),
}

function card_filter(a_card)
    -- permet uniquement le ciblage de carte ayant comme nom 'Exemple'
    return a_card.Name == "Exemple"
end 

-- fonction qui renvoie un booléen si la carte peut être jouée ou non
function precondition()
    -- la carte peut être jouée sans aucun critère spécifiques
    return true
end 

function description()
    return "une description de la carte qui peut changer"
end

function do_effect()
    -- le code de l'effet de la carte
end

function on_level_change(oldLevel, newLevel)
    -- fonction appelée quand la carte change de niveau (OPTIONNEL)
end

function on_game_start() 
    -- fonction appelée au lancement de la partie
end
Erreur à l'exécution de C:\Users\Lelou\AppData\Local\Temp\rurkt5kv\Card\cngy2ago.krb
C:\Users\Lelou\AppData\Local\Temp\rurkt5kv\Card\cngy2ago.krb:(8,0-12,1): attempt to call a nil value
]]></output>
          </test-case>
          <test-case id="1-1007" name="Execution Error" fullname="CardGameTests.Tests du chargement des effets.Execution Error" methodname="Test_Load_Effect_Bad" classname="CardGameTests.Tests" runstate="Runnable" seed="214410703" result="Passed" start-time="2021-12-09T16:27:13.3154879Z" end-time="2021-12-09T16:27:13.3199906Z" duration="0.004180" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[max_level = 2
image_id = 500



name = "Nom"
pa_cost = 2
pa_cost.bonjour = 5

targets = {
    -- Nom, Type, Automatique ou non,Fonction de filtre des cibles potentielles
    CreateTarget("Une cible carte", TargetTypes.Card, false, card_filter),
    CreateTarget("Un joueur", TargetTypes.Player, true),
}

function card_filter(a_card)
    -- permet uniquement le ciblage de carte ayant comme nom 'Exemple'
    return a_card.Name == "Exemple"
end 

-- fonction qui renvoie un booléen si la carte peut être jouée ou non
function precondition()
    -- la carte peut être jouée sans aucun critère spécifiques
    return true
end 

function description()
    return "une description de la carte qui peut changer"
end

function do_effect()
    -- le code de l'effet de la carte
end

function on_level_change(oldLevel, newLevel)
    -- fonction appelée quand la carte change de niveau (OPTIONNEL)
end

function on_game_start() 
    -- fonction appelée au lancement de la partie
end
Erreur à l'exécution de C:\Users\Lelou\AppData\Local\Temp\rurkt5kv\Card\u2ftce51.ex5
C:\Users\Lelou\AppData\Local\Temp\rurkt5kv\Card\u2ftce51.ex5:(8,0-19): attempt to index a number value
]]></output>
          </test-case>
          <test-case id="1-1008" name="Garbage Script" fullname="CardGameTests.Tests du chargement des effets.Garbage Script" methodname="Test_Load_Effect_Bad" classname="CardGameTests.Tests" runstate="Runnable" seed="2000956237" result="Passed" start-time="2021-12-09T16:27:13.3199906Z" end-time="2021-12-09T16:27:13.3248053Z" duration="0.005117" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[sqdsd
Erreur de syntaxe dans C:\Users\Lelou\AppData\Local\Temp\rurkt5kv\Card\qum3km3f.22u
C:\Users\Lelou\AppData\Local\Temp\rurkt5kv\Card\qum3km3f.22u:(1,5): unexpected symbol near '<eof>'
]]></output>
          </test-case>
          <test-case id="1-1009" name="Number Is Nan" fullname="CardGameTests.Tests du chargement des effets.Number Is Nan" methodname="Test_Load_Effect_Bad" classname="CardGameTests.Tests" runstate="Runnable" seed="970755432" result="Passed" start-time="2021-12-09T16:27:13.3248053Z" end-time="2021-12-09T16:27:13.3300558Z" duration="0.005110" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[max_level = 2
image_id = 500



name = "Nom"
pa_cost = 2 / 0

targets = {
    -- Nom, Type, Automatique ou non,Fonction de filtre des cibles potentielles
    CreateTarget("Une cible carte", TargetTypes.Card, false, card_filter),
    CreateTarget("Un joueur", TargetTypes.Player, true),
}

function card_filter(a_card)
    -- permet uniquement le ciblage de carte ayant comme nom 'Exemple'
    return a_card.Name == "Exemple"
end 

-- fonction qui renvoie un booléen si la carte peut être jouée ou non
function precondition()
    -- la carte peut être jouée sans aucun critère spécifiques
    return true
end 

function description()
    return "une description de la carte qui peut changer"
end

function do_effect()
    -- le code de l'effet de la carte
end

function on_level_change(oldLevel, newLevel)
    -- fonction appelée quand la carte change de niveau (OPTIONNEL)
end

function on_game_start() 
    -- fonction appelée au lancement de la partie
end
]]></output>
          </test-case>
          <test-case id="1-1010" name="Syntax Error" fullname="CardGameTests.Tests du chargement des effets.Syntax Error" methodname="Test_Load_Effect_Bad" classname="CardGameTests.Tests" runstate="Runnable" seed="1863620499" result="Passed" start-time="2021-12-09T16:27:13.3300558Z" end-time="2021-12-09T16:27:13.3348790Z" duration="0.005177" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[max_level = 2
image_id = 500


name = "Nom"
pa_cost = 2

targets = {
    -- Nom, Type, Automatique ou non,Fonction de filtre des cibles potentielles
    CreateTarget("Une cible carte", TargetTypes.Card, false, card_filter),
    CreateTarget("Un joueur", TargetTypes.Player, true),
}

function card_filter(a_card)
    -- permet uniquement le ciblage de carte ayant comme nom 'Exemple'
    return a_card.Name == "Exemple"
end 

-- fonction qui renvoie un booléen si la carte peut être jouée ou non
function precondition()
    -- la carte peut être jouée sans aucun critère spécifiques
    return true
end 

function description()
    return "une description de la carte qui peut changer"
end

function do_effect()
    -- le code de l'effet de la carte
end

function on_level_change(oldLevel, newLevel
    -- fonction appelée quand la carte change de niveau (OPTIONNEL)
end

function on_game_start() 
    -- fonction appelée au lancement de la partie
end
Erreur de syntaxe dans C:\Users\Lelou\AppData\Local\Temp\rurkt5kv\Card\rsccgfem.qvo
C:\Users\Lelou\AppData\Local\Temp\rurkt5kv\Card\rsccgfem.qvo:(35,0-3): ')' expected (to close '(' at line 33) near 'end'
]]></output>
          </test-case>
          <test-case id="1-1011" name="Wrong Game Start Type" fullname="CardGameTests.Tests du chargement des effets.Wrong Game Start Type" methodname="Test_Load_Effect_Bad" classname="CardGameTests.Tests" runstate="Runnable" seed="1016541588" result="Passed" start-time="2021-12-09T16:27:13.3348790Z" end-time="2021-12-09T16:27:13.3386269Z" duration="0.003770" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[max_level = 2
image_id = 500


name = "Nom"
pa_cost = 2

targets = {
    -- Nom, Type, Automatique ou non,Fonction de filtre des cibles potentielles
    CreateTarget("Une cible carte", TargetTypes.Card, false, card_filter),
    CreateTarget("Un joueur", TargetTypes.Player, true),
}

function card_filter(a_card)
    -- permet uniquement le ciblage de carte ayant comme nom 'Exemple'
    return a_card.Name == "Exemple"
end 

-- fonction qui renvoie un booléen si la carte peut être jouée ou non
function precondition()
    -- la carte peut être jouée sans aucun critère spécifiques
    return true
end 

function description()
    return "une description de la carte qui peut changer"
end

function do_effect()
    -- le code de l'effet de la carte
end

function on_level_change(oldLevel, newLevel)
    -- fonction appelée quand la carte change de niveau (OPTIONNEL)
end

on_game_start = "bonjour"
]]></output>
          </test-case>
          <test-case id="1-1012" name="Wrong Level Change Type" fullname="CardGameTests.Tests du chargement des effets.Wrong Level Change Type" methodname="Test_Load_Effect_Bad" classname="CardGameTests.Tests" runstate="Runnable" seed="339043986" result="Passed" start-time="2021-12-09T16:27:13.3393789Z" end-time="2021-12-09T16:27:13.3443965Z" duration="0.005210" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[max_level = 2
image_id = 500


name = "Nom"
pa_cost = 2

targets = {
    -- Nom, Type, Automatique ou non,Fonction de filtre des cibles potentielles
    CreateTarget("Une cible carte", TargetTypes.Card, false, card_filter),
    CreateTarget("Un joueur", TargetTypes.Player, true),
}

function card_filter(a_card)
    -- permet uniquement le ciblage de carte ayant comme nom 'Exemple'
    return a_card.Name == "Exemple"
end 

-- fonction qui renvoie un booléen si la carte peut être jouée ou non
function precondition()
    -- la carte peut être jouée sans aucun critère spécifiques
    return true
end 

function description()
    return "une description de la carte qui peut changer"
end

function do_effect()
    -- le code de l'effet de la carte
end

function on_game_start(oldLevel, newLevel)
    -- fonction appelée quand la carte change de niveau (OPTIONNEL)
end

on_level_change = "bonjour"
]]></output>
          </test-case>
          <test-case id="1-1013" name="Wrong Type" fullname="CardGameTests.Tests du chargement des effets.Wrong Type" methodname="Test_Load_Effect_Bad" classname="CardGameTests.Tests" runstate="Runnable" seed="328298586" result="Passed" start-time="2021-12-09T16:27:13.3443965Z" end-time="2021-12-09T16:27:13.3481456Z" duration="0.004006" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[max_level = "oui"
image_id = 500


name = "Nom"
pa_cost = 2

targets = {
    -- Nom, Type, Automatique ou non,Fonction de filtre des cibles potentielles
    CreateTarget("Une cible carte", TargetTypes.Card, false, card_filter),
    CreateTarget("Un joueur", TargetTypes.Player, true),
}

function card_filter(a_card)
    -- permet uniquement le ciblage de carte ayant comme nom 'Exemple'
    return a_card.Name == "Exemple"
end 

-- fonction qui renvoie un booléen si la carte peut être jouée ou non
function precondition()
    -- la carte peut être jouée sans aucun critère spécifiques
    return true
end 

function description()
    return "une description de la carte qui peut changer"
end

function do_effect()
    -- le code de l'effet de la carte
end

function on_level_change(oldLevel, newLevel)
    -- fonction appelée quand la carte change de niveau (OPTIONNEL)
end

function on_game_start() 
    -- fonction appelée au lancement de la partie
end
]]></output>
          </test-case>
        </test-suite>
        <test-suite type="ParameterizedMethod" id="1-1004" name="Test_Load_Effect_Good" fullname="CardGameTests.Tests.Test_Load_Effect_Good" classname="CardGameTests.Tests" runstate="Runnable" testcasecount="3" result="Passed" start-time="2021-12-09T16:27:13.3481456Z" end-time="2021-12-09T16:27:13.3741597Z" duration="0.026201" total="3" passed="3" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="3">
          <properties>
            <property name="Description" value="Verifier que les effets bien formés sont acceptés" />
          </properties>
          <test-case id="1-1001" name="Example" fullname="CardGameTests.Tests du chargement des effets.Example" methodname="Test_Load_Effect_Good" classname="CardGameTests.Tests" runstate="Runnable" seed="2042743135" result="Passed" start-time="2021-12-09T16:27:13.3481456Z" end-time="2021-12-09T16:27:13.3578961Z" duration="0.009365" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[max_level = 2
image_id = 500


name = "Nom"
pa_cost = 2

targets = {
    -- Nom, Type, Automatique ou non,Fonction de filtre des cibles potentielles
    CreateTarget("Une cible carte", TargetTypes.Card, false, card_filter),
    CreateTarget("Un joueur", TargetTypes.Player, true),
}

function card_filter(a_card)
    -- permet uniquement le ciblage de carte ayant comme nom 'Exemple'
    return a_card.Name == "Exemple"
end 

-- fonction qui renvoie un booléen si la carte peut être jouée ou non
function precondition()
    -- la carte peut être jouée sans aucun critère spécifiques
    return true
end 

function description()
    return "une description de la carte qui peut changer"
end

function do_effect()
    -- le code de l'effet de la carte
end

function on_level_change(oldLevel, newLevel)
    -- fonction appelée quand la carte change de niveau (OPTIONNEL)
end

function on_game_start() 
    -- fonction appelée au lancement de la partie
end
]]></output>
          </test-case>
          <test-case id="1-1002" name="Example Without Level Change" fullname="CardGameTests.Tests du chargement des effets.Example Without Level Change" methodname="Test_Load_Effect_Good" classname="CardGameTests.Tests" runstate="Runnable" seed="647545449" result="Passed" start-time="2021-12-09T16:27:13.3578961Z" end-time="2021-12-09T16:27:13.3674106Z" duration="0.009563" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[max_level = 2
image_id = 500


name = "Nom"
pa_cost = 2

targets = {
    -- Nom, Type, Automatique ou non,Fonction de filtre des cibles potentielles
    CreateTarget("Une cible carte", TargetTypes.Card, false, card_filter),
    CreateTarget("Un joueur", TargetTypes.Player, true),
}

function card_filter(a_card)
    -- permet uniquement le ciblage de carte ayant comme nom 'Exemple'
    return a_card.Name == "Exemple"
end 

-- fonction qui renvoie un booléen si la carte peut être jouée ou non
function precondition()
    -- la carte peut être jouée sans aucun critère spécifiques
    return true
end 

function description()
    return "une description de la carte qui peut changer"
end

function do_effect()
    -- le code de l'effet de la carte
end

function on_game_start()
    -- fonction appelée au lancement de la partie
end
]]></output>
          </test-case>
          <test-case id="1-1003" name="Example Without On Game Start" fullname="CardGameTests.Tests du chargement des effets.Example Without On Game Start" methodname="Test_Load_Effect_Good" classname="CardGameTests.Tests" runstate="Runnable" seed="1161837972" result="Passed" start-time="2021-12-09T16:27:13.3674106Z" end-time="2021-12-09T16:27:13.3741597Z" duration="0.007187" asserts="1">
            <properties>
              <property name="Category" value="Card" />
            </properties>
            <output><![CDATA[max_level = 2
image_id = 500


name = "Nom"
pa_cost = 2

targets = {
    -- Nom, Type, Automatique ou non,Fonction de filtre des cibles potentielles
    CreateTarget("Une cible carte", TargetTypes.Card, false, card_filter),
    CreateTarget("Un joueur", TargetTypes.Player, true),
}

function card_filter(a_card)
    -- permet uniquement le ciblage de carte ayant comme nom 'Exemple'
    return a_card.Name == "Exemple"
end 

-- fonction qui renvoie un booléen si la carte peut être jouée ou non
function precondition()
    -- la carte peut être jouée sans aucun critère spécifiques
    return true
end 

function description()
    return "une description de la carte qui peut changer"
end

function do_effect()
    -- le code de l'effet de la carte
end

function on_level_change(oldLevel, newLevel)
    -- fonction appelée quand la carte change de niveau (OPTIONNEL)
end
]]></output>
          </test-case>
        </test-suite>
      </test-suite>
    </test-suite>
  </test-suite>
</test-run>